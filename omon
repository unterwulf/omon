#!/bin/sh
#
# Copyright (c) 2011  Vitaly Sinilin
#
# omon (Online Monitor) is a script that helps system administrator to monitor
# availability of the host.  It is meant to be periodically run by the host
# itself and so does not require access to some remote monitoring host.
#
# To assess itself host availability the script pings specified internet
# hosts.  A typical configuration is to ping well known public internet
# services.  (Make sure they respond to pings!)
#
# As the main focus of the script is to just log host availability, the script
# has no any other means to report outage except stdout.  So you will have
# to use some kind of wrapper in case you need an immediate reaction on outage.
# (Note, as the script is running on the host side, the wrapper may not be able
# to send outage notification via the Internet.  However, SMS may be an option.)
#
# This script is intended to be executed by cron, so it generates an output
# only when something bad happens.
#

if [ $# -ne 1 ] || [ "$1" == -h ] || [ "$1" == --help ]; then
   echo "usage: omon <configfile>"
   exit 1
fi

. $1                              # load config file
export LANG=C                     # disable nls stuff

if [ -z "$HOSTS" ]; then
   echo "Host list is empty.  Bad config?"
   exit 1
fi

: ${LOG_FILE:=/var/log/omon.log}
: ${STATE_FILE:=/var/state/omon/omon.state}
: ${OUTAGE_FILE:=/var/state/omon/omon.outage}
: ${TMP_FILE_PREFIX:=/tmp/omon-$$-}

: ${WARN_THRESHOLD:=5000}     # value above this will generate warning
: ${OUTAGE_THRESHOLD:=10000}  # value above this will be treated as outage

date=$(date +"%b %d %H:%M:%S")
sum=0
state=
last=

# Make our temporary files a little bit securer.

umask 077

# Get last network state.

[ -f "$STATE_FILE" ] && last=$(cat "$STATE_FILE")

# Estimate current network state using asynchronous ping commands.

for host in $HOSTS; do
   (ping -c 5 -q "$host" 2>/dev/null | \
      sed '/packet loss/{s/^.* \([0-9]\+\)% packet loss.*$/\1/;q};d' \
      2>/dev/null > "$TMP_FILE_PREFIX$host")&
done

# Wait for ping completion.

wait

# Analyse ping results.

set ${FACTORS:-''}
for host in $HOSTS; do
   percent=$(cat "$TMP_FILE_PREFIX$host")
   : ${percent:=100}
   factor=${1:-100}
   state="$state$host: $percent; "
   sum=$(($sum + $percent * $factor))
   rm "$TMP_FILE_PREFIX$host"
   shift
done

# Log if network state has changed.

if [ "$last" != "$state" ] && \
   ([ $sum -ge $WARN_THRESHOLD ] || [ -f "$OUTAGE_FILE" ])
then
   echo "$date loss: $state" >> "$LOG_FILE"
   echo "$state" > "$STATE_FILE"
fi

# Check current network state.

if [ $sum -ge $OUTAGE_THRESHOLD ]; then
   # OMG! It is an outage.
   if [ ! -f "$OUTAGE_FILE" ]; then
      echo "$date" > "$OUTAGE_FILE"
      echo "ATTENTION! Network outage has come on $date!"
   fi
   exit
elif [ $sum -ge $WARN_THRESHOLD ]; then
   # Just inform user about degradation.
   echo "$date loss: $state"
fi

# Check if an outage has been overpassed.

if [ -f "$OUTAGE_FILE" ]; then
   from=$(cat "$OUTAGE_FILE")
   echo "There was an outage from $from till $date."
   echo
   sed "/$from/,\$p;d" "$LOG_FILE"
   rm "$OUTAGE_FILE"
fi
